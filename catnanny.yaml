substitutions:
  device_name: catnanny
  friendly_name: Cat Nanny
  device_description: The nanny that take care my cat.

esphome:
  platform: ESP32
  board: esp32dev

packages:
  wifi: !include shared/wifi.yaml
  device_base: !include shared/device_base.yaml

cover:
  - platform: template
    name: ${friendly_name} Food Cover
    id: food_cover
    has_position: true
    optimistic: false
    open_action:
      - stepper.set_target:
          id: food_stepper
          target: 1050
      - while:
          condition:
            lambda: |-
              return id(food_cover).position != 1;
          then:
            - cover.template.publish:
                id: food_cover
                current_operation: !lambda |-
                    return COVER_OPERATION_OPENING;
                position: !lambda 'return (float(float(id(food_stepper).current_position) / 1050));'
            - delay: 1000 ms
      - cover.template.publish:
          id: food_cover
          current_operation: IDLE
          position: !lambda 'return 1;'
    close_action:
      - stepper.set_target:
          id: food_stepper
          target: 0
      - while:
          condition:
            lambda: |-
              return id(food_cover).position != 0;
          then:
            - cover.template.publish:
                id: food_cover
                current_operation: !lambda |-
                    return COVER_OPERATION_CLOSING;
                position: !lambda 'return (float(float(id(food_stepper).current_position) / 1050));'
            - delay: 1000 ms
      - cover.template.publish:
          id: food_cover
          current_operation: IDLE
          position: !lambda 'return 0;'
    stop_action:
      - stepper.set_target:
          id: food_stepper
          target: !lambda return id(food_stepper).current_position;
      - cover.template.publish:
          id: food_cover
          current_operation: IDLE
          position: !lambda 'return (float(float(id(food_stepper).current_position) / 1050));'
    position_action:
      - stepper.set_target:
          id: food_stepper
          target: !lambda return int(1050*pos);
      - while:
          condition:
            lambda: |-
              return id(food_cover).position != pos;
          then:
            - cover.template.publish:
                id: food_cover
                current_operation: !lambda |-
                  if(pos > id(food_cover).position){
                    return COVER_OPERATION_OPENING;
                  } else {
                    return COVER_OPERATION_CLOSING;
                  }
                position: !lambda 'return (float(float(id(food_stepper).current_position) / 1050));'
            - delay: 1000 ms
      - cover.template.publish:
          id: food_cover
          current_operation: IDLE
          position: !lambda 'return (float(float(id(food_stepper).current_position) / 1050));'

stepper:
  - platform: uln2003
    id: food_stepper
    pin_a: 14
    pin_b: 27
    pin_c: 26
    pin_d: 25
    max_speed: 200 steps/s
    sleep_when_done: True

time:
  - platform: sntp
    id: feed_timer
    on_time:
      - cron: '0 /5 * * * *'
        then:
          - cover.open: food_cover
          - delay: 10s
          - cover.close: food_cover